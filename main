/*
 * Stepper.c
 *
 * Created: 2/26/2025 6:44:15 PM
 * Author : Matthew Houston
 */ 

#define F_CPU 16000000UL  // Define the clock frequency (16 MHz)
#include <avr/io.h>
#include <util/delay.h>  // Include delay library
#include <avr/interrupt.h> //Include Interrupt library


void open();
void close();
void motion3();
void trigger();
uint16_t echo();

ISR(INT0_vect)
{
	open();
	_delay_ms(1500);
	close();
	_delay_ms(1000);
	
}

int main(void)
{
	DDRB = 0b00000001;      // PB0 (TRIG) and PB2 (LED) as output, PB1 (ECHO) input
	DDRD = 0b11110000;		//Set PC0 to input for switch and PD4-PD7 to outputs for the H-Bridge
   
	DDRC = 0b00100000;
	PORTC = 0b00000000;
   
	//Setup and activate Interrupt Service registers
	EICRA = 0b00001111;
	EIMSK = 0b00000001;
	sei();

   
	int uS;
	int distance;
	    
    while (1) 
    {
		trigger();               // Trigger the ultrasonic pulse
		uS = echo();             // Measure echo duration
		distance = uS / 58;      // Convert time to distance (cm)
		
		if (distance < 4)        
		{
			PORTC = 0b00100000;
			_delay_ms(50);
			PORTC = 0b00000000;
		}
		_delay_ms(100);  // Small delay before next trigger
    }
}

void close()
{
	
	int steps = 12; // steps = degree of rotations / 1.8 * 4
	PORTB = 0b00000001;
	for (int i = 0; i < steps; i++)
	{
		PORTD = 0b00010000;
		_delay_ms(10);
		PORTD = 0b01000000;
		_delay_ms(10);
		PORTD = 0b00100000;
		_delay_ms(10);
		PORTD = 0b10000000;
		_delay_ms(10);
	}
	PORTB = 0b00000011;
	PORTD = 0b00000000;
}

void open()
{
	int steps = 12;
	PORTB = 0b00000010;
	for (int i = 0; i < steps; i++)
	{
		PORTD = 0b10000000;
		_delay_ms(10);
		PORTD = 0b00100000;
		_delay_ms(10);
		PORTD = 0b01000000;
		_delay_ms(10);
		PORTD = 0b00010000;
		_delay_ms(10);
	}
	PORTB = 0b00000011;
	PORTD = 0b00000000;
}

// Function to send a trigger pulse to the sensor
void trigger()
{
	PORTB |= 0b00000001;   // Set PB0 high to activate the trigger
	_delay_us(65);         // Datasheet recommended wait time for trigger pulse
	PORTB &= ~0x01;        // Reset PB0 (low)
}

// Function to measure echo pulse duration
uint16_t echo()
{
	// Wait for ECHO to go HIGH (signal received)
	while ((PINB & 0b00000010) == 0);

	// Measure how long the ECHO stays HIGH
	uint16_t count = 0;
	while ((PINB & 0b00000010) != 0) {
		_delay_us(1);  // Wait 1 microsecond
		count++;       // Count the duration
		if (count > 30000) break; // Timeout safety
	}

	return count;
}
