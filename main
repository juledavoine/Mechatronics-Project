/*
 * Stepper.c
 *
 * Created: 2/26/2025 6:44:15 PM
 * Author : Matthew Houston
 */ 

#define F_CPU 16000000UL  // Define the clock frequency (16 MHz)
#include <avr/io.h>
#include <util/delay.h>  // Include delay library
#include <avr/interrupt.h> //Include Interrupt library


void open();
void close();
void motion3();
void trigger();
uint16_t echo();

int send_to_MAX7221(unsigned char command, unsigned char data);
int32_t HX711_read(void);

ISR(INT0_vect)
{
	open();
	//start countdown until lid closes
	
	send_to_MAX7221(0x01,0x03); // display 3
	
	_delay_ms(500); 
	
	send_to_MAX7221(0x01,0x02); // display 2
	
	_delay_ms(500);
	
	send_to_MAX7221(0x01, 0x01); // display 1
	
	_delay_ms(500);
	
	send_to_MAX7221(0x01, 0x0F); //blank indefinitely until lid opens back up again
	
	close();
	_delay_ms(100);
	
}

ISR(INT1_vect)
{
	PORTC &= ~(1 << PC1);  // Set PC1 low for the LED to turn on
	PORTC |= (1 << PC2);   // Set PC2 high to turn on the buzzer briefly
	_delay_ms(500);
	PORTC &= ~(1 << PC2);  // Set PC2 low to turn off the buzzer
	while ((PINC & (1 << PC0))); // Stay in loop while button is not pressed (HIGH)
	_delay_ms(20); // Debounce delay
	PORTC |= (1 << PC1);   // Set PC1 high to turn off the LED
}




int main(void)
{
	DDRB = 0b01101101;      // PB0 (TRIG) output, PB1 (ECHO) input and set pins SCK, MOSI, and SS as output
	PORTB &= ~(1<<PB6);		//Clear PB6 to turn on indicator light
	
	DDRD = 0b11110001;		//PD4-PD7 to outputs for the H-Bridge
   
	DDRC = 0b01100110; 
	PORTC = 0b00000010;		//Set PC1 to turn off full can led
   
	//Setup and activate Interrupt Service registers
	EICRA = 0b00001111;
	EIMSK = 0b00000011;
	sei();

	// Set up Main SPI
	SPCR = 0b01010001;
	
	//Setup the MAX chip for 7 segment display
	send_to_MAX7221(0x09, 0b00000001); // enable decoding only for digit 1
	send_to_MAX7221(0x0B, 0x00);       // scan limit: only digit 0
	send_to_MAX7221(0x0C, 0x01);       // turn on the chip
   
	// Set up PC4 as input (DT) and PC3 as output (SCK)
	DDRC &= ~(1 << PC4);    // PC4 (DT) as input
	DDRC |= (1 << PC3);     // PC3 (SCK) as output
	PORTC &= ~(1 << PC3);   // Make sure PC3 (SCK) is low initially
   
	//Creation of variables for the input sensors
	int uS; 
	int distance;
	int weight;
	    
    while (1) 
    {
		
		trigger();               // Trigger the ultrasonic pulse
		uS = echo();             // Measure echo duration
		distance = uS / 58;      // Convert time to distance (cm)
		
		if (distance < 4)        
		{
			PORTC |= (1 << PC5);	//Flash PC5 to use as a rising edge for INT0
			_delay_ms(50);
			PORTC &= ~(1 << PC5);	//Clear PC5 
		}
		_delay_ms(100);  // Small delay before next trigger
		weight = HX711_read();
		if (weight > 15000)
		{
			PORTD |= (1 << PD0);	//Flash PD0 to use as rising edge for INT1
			_delay_ms(50);
			PORTD &= ~(1 << PD0);	//Clear PC5
			
		}
    }
}

void close()
{
	
	int steps = 12; // steps = degree of rotations / 1.8 * 4
	for (int i = 0; i < steps; i++)
	{
		PORTD = 0b00010000;
		_delay_ms(10);
		PORTD = 0b01000000;
		_delay_ms(10);
		PORTD = 0b00100000;
		_delay_ms(10);
		PORTD = 0b10000000;
		_delay_ms(10);
	}
	PORTB = 0b00000011;
	PORTD = 0b00000000;
}

void open()
{
	int steps = 12;
	for (int i = 0; i < steps; i++)
	{
		PORTD = 0b10000000;
		_delay_ms(10);
		PORTD = 0b00100000;
		_delay_ms(10);
		PORTD = 0b01000000;
		_delay_ms(10);
		PORTD = 0b00010000;
		_delay_ms(10);
	}
	PORTB = 0b00000011;
	PORTD = 0b00000000;
}

// Function to send a trigger pulse to the sensor
void trigger()
{
	PORTB |= 0b00000001;   // Set PB0 high to activate the trigger
	_delay_us(65);         // Datasheet recommended wait time for trigger pulse
	PORTB &= ~0x01;        // Reset PB0 (low)
}

// Function to measure echo pulse duration
uint16_t echo()
{
	// Wait for ECHO to go HIGH (signal received)
	while ((PINB & 0b00000010) == 0);

	// Measure how long the ECHO stays HIGH
	uint16_t count = 0;
	while ((PINB & 0b00000010) != 0) {
		_delay_us(1);  // Wait 1 microsecond
		count++;       // Count the duration
		if (count > 30000) break; // Timeout safety
	}

	return count;
}

int send_to_MAX7221(unsigned char command, unsigned char data)
{
	PORTB = PORTB & 0b11111011; // Clear PB2, which is the SS bit, so that
	// transmission can begin
	SPDR = command; // Send command
	while(!(SPSR & (1<<SPIF))); // Wait for transmission to finish
	
	SPDR = data; // Send data
	while(!(SPSR & (1<<SPIF))); // Wait for transmission to finish
	PORTB = PORTB | 0b00000100; // Return PB2 to 1, which is the SS bit, to end
	// transmission
	return 0;
}

int32_t HX711_read() {
	int32_t count = 0;

	// Wait for DT (PC4) to go LOW, indicating new data is ready
	while (PINC & (1 << PC4));  // Wait until DT goes low

	// Read 24 bits from HX711
	for (uint8_t i = 0; i < 24; i++) {
		PORTC |= (1 << PC3);  // Set SCK (PC3) high
		_delay_us(1);         // Short delay
		count = count << 1;   // Shift left to make space for the new bit

		// If DT (PC4) is high, set the least significant bit
		if (PINC & (1 << PC4)) {
			count++;  // Add 1 if DT is high
		}

		PORTC &= ~(1 << PC3);  // Set SCK (PC3) low
		_delay_us(1);          // Short delay
	}

	// Pulse SCK (PC3) one more time to set the gain to 128
	PORTC |= (1 << PC3);    // Set SCK high
	_delay_us(1);           // Short delay
	PORTC &= ~(1 << PC3);   // Set SCK low
	_delay_us(1);           // Short delay

	// Sign extend if the value is negative (check the MSB of 24 bits)
	if (count & 0x800000) {
		count |= 0xFF000000;  // If the MSB is 1, extend sign to 32 bits
	}

	return count;  // Return the 24-bit data as a signed 32-bit integer
}
