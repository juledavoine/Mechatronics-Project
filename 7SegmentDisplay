/*
 * 7Segment Code for Project
 *
 * Created: 4/14/2025 5:20:44 PM
 * Author : Juliette Davoine
 */ 

#include <avr/io.h>
#define FREQ_CLK 1000000

int send_to_MAX7221(unsigned char command, unsigned char data);
void wait_with_timer1(volatile int number_of_msec);

int main(void)
{
	
	// setup
	//DDRD = 0xFF; // Set DDRD to display data that comes in from Secondary
	DDRB = 0b00101100; //	DDRB = 1<<PORTB5 | 1<<PORTB3 | 1<<PORTB2;  // Set pins SCK, MOSI, and SS as output

	// Set up Main SPI
	SPCR = 0b01010001; // SPCR = 1<<SPE | 1<<MSTR | 1<<SPR0; // (SPIE = 0, SPE = 1, DORD = 0, MSTR = 1, CPOL = 0, CPHA = 0, SPR1 = 0, SPR0 = 1)
	// enable the SPI, set to Main mode 0, SCK = Fosc/16, lead with MSB
	
	send_to_MAX7221(0x09, 0b00000001); // enable decoding only for digit 1
	send_to_MAX7221(0x0B, 0x00);       // scan limit: only digit 0
	send_to_MAX7221(0x0C, 0x01);       // turn on the chip

	
	
	while (1)
	{
		wait_with_timer1(1000); // wait until lid is OPEN
		
		//start countdown until lid closes
	
		send_to_MAX7221(0x01,0x03); // display 3 
		
		wait_with_timer1(1000);
	
		send_to_MAX7221(0x01,0x02); // display 2
		
		wait_with_timer1(1000);
		
		send_to_MAX7221(0x01, 0x01); // display 1
		
		wait_with_timer1(1000);
		
		send_to_MAX7221(0x01, 0x0F); //blank indefinitely until lid opens back up again
		
	}
}

int send_to_MAX7221(unsigned char command, unsigned char data)
{
	PORTB = PORTB & 0b11111011; // Clear PB2, which is the SS bit, so that
	// transmission can begin
	SPDR = command; // Send command
	while(!(SPSR & (1<<SPIF))); // Wait for transmission to finish
	
	SPDR = data; // Send data
	while(!(SPSR & (1<<SPIF))); // Wait for transmission to finish
	PORTB = PORTB | 0b00000100; // Return PB2 to 1, which is the SS bit, to end
	// transmission
	return 0;
}

void wait_with_timer1(volatile int number_of_msec) {
	// This subroutine uses the Timer1 registers to create a delay equal to number_of_msec*T, where T is 1 msec
	// It changes depending on the frequency defined by FREQ_CLK
	char register_B_setting;
	char count_limit;
	
	// Some typical clock frequencies:
	switch(FREQ_CLK) {
		case 16000000:
		register_B_setting = 0b00000011; // this will start the timer in Normal mode with prescaler of 64 (CS02 = 0, CS01 = CS00 = 1).
		count_limit = 250; // For prescaler of 64, a count of 250 will require 1 msec
		break;
		case 8000000:
		register_B_setting =  0b00000011; // this will start the timer in Normal mode with prescaler of 64 (CS02 = 0, CS01 = CS00 = 1).
		count_limit = 125; // for prescaler of 64, a count of 125 will require 1 msec
		break;
		case 1000000:
		register_B_setting = 0b00000010; // this will start the timer in Normal mode with prescaler of 8 (CS02 = 0, CS01 = 1, CS00 = 0).
		count_limit = 125; // for prescaler of 8, a count of 125 will require 1 msec
		break;
	}
	
	while (number_of_msec > 0) {
		TCCR1A = 0x00; // clears WGM00 and WGM01 (bits 0 and 1) to ensure Timer/Counter is in normal mode.
		TCNT1 = 0;  // preload value for testing on count = 250
		TCCR1B =  register_B_setting;  // Start TIMER0 with the settings defined above
		while (TCNT1 < count_limit); // exits when count = the required limit for a 1 msec delay
		TCCR1B = 0x00; // Stop TIMER0
		number_of_msec--;
	}
} // end wait()
